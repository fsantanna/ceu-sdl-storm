code/await Wheel (var& IPhysics car, var Vector2D offset) => void
do
    var int radius = 15;
    var float esp = (2 * PI / 12);
    var float pos = 0;

    par do
        var int dt = _;
        every dt in SDL_DT do
            var int s = do
                if car.x.vel >= 0 then
                    escape  1;
                else
                    escape -1;
                end
            end;

            var float mod = _sqrt(_pow(car.x.vel,2) + _pow(car.y.vel,2));
            pos = pos + (s * mod * dt / 1000 / radius);
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&&outer.ren, 0xFF, 0x9D, 0x46, 0x00);
            loop i in [0 -> 12[ do
                var SDL_Rect r =
                    val SDL_Rect(
                        (car.x.pos + offset.x + (radius * _cos(i*esp + pos))) as int,
                        (car.y.pos + offset.y + (radius * _sin(i*esp + pos))) as int,
                        5, 5
                    );
                _SDL_RenderFillRect(&&outer.ren, (&&r as _SDL_Rect&&));
            end
        end
    end
end

code/await Car (void) => FOREVER
do
    var& IPhysics car;
    spawn Physics(SDL_Rect(320,430, 60,30), SDL_Color(0x3B,0xBC,0x48,0))
            => (car);
    spawn Wheel(&car, Vector2D(        0, car.y.len));
    spawn Wheel(&car, Vector2D(car.x.len, car.y.len));

    car.x.drag = 0.95;
    car.y.drag = 0.95;

    par do
        loop do
            var _SDL_KeyboardEvent&& key;
            key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_LEFT;
            car.x.acc = -400;
            key = await SDL_KEYUP   until key:keysym.sym==_SDLK_LEFT;
            car.x.acc = 0;
        end
    with
        loop do
            var _SDL_KeyboardEvent&& key;
            key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_RIGHT;
            car.x.acc = 400;
            key = await SDL_KEYUP   until key:keysym.sym==_SDLK_RIGHT;
            car.x.acc = 0;
        end
    end
end
