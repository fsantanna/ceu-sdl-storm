code/await Collisions (void) => FOREVER
do
    par do
        // cloud vs cloud
        every (_rand()%3)s do
            var&   IPhysics cloud1;
            event& void     blink1;
            loop (cloud1,_,blink1) in outer.clouds do
                var&   IPhysics cloud2;
                event& void     blink2;
                loop (cloud2,_,blink2) in outer.clouds do
                    if (&&cloud1 as usize) < (&&cloud2 as usize)
                        and (call Intersects(&cloud1, &cloud2))
                    then
                        emit blink1;
                        emit blink2;
                        var Vector2D pos =
                            val Vector2D(
                                ((cloud1.x.pos + cloud2.x.pos + cloud2.x.len)/2) as int,
                                ((cloud1.y.pos + cloud1.y.len + cloud2.y.pos + cloud2.y.len)/2) as int,
                            );
                        spawn Light(&outer.lights,pos,_,_,_) in outer.lights;
                    end
                end
            end
        end
    with
        // car vs boom
        var int dt;
        every dt in SDL_DT do
            var& IPhysics boom;
            loop (boom) in outer.booms do
                if (call Intersects(&boom, &outer.car)) then
                    var Vector2D vel = call Boom_Vel(&boom, &outer.car);
                    outer.car.x.vel = outer.car.x.vel + (vel.x*dt/20);
                end
            end
        end
    with
        // drop vs *
        var int dt;
        every dt in SDL_DT do
            var& IPhysics drop1;
            var& bool     collided1;
            loop (drop1,collided1) in outer.drops
            do
                // drop vs drop
                var& IPhysics drop2;
                var& bool     collided2;
                loop (drop2,collided2) in outer.drops do
                    if (&&drop1 as usize) < (&&drop2 as usize)
                        and (call Intersects(&drop1, &drop2))
                    then
                        if collided1 then
                            drop1.x.vel = +50;
                        end
                        if collided2 then
                            drop2.x.vel = -50;
                        end
                    end
                end

                // drop vs car
                if (call Intersects(&drop1, &outer.car)) then
                    if drop1.y.pos < outer.car.y.pos then
                        drop1.y.pos = outer.car.y.pos - drop1.y.len;
                        drop1.y.vel = -(drop1.y.vel/3);
                        drop1.x.vel = outer.car.x.vel / 2;
                        collided1 = true;
                    else
                        drop1.x.vel = outer.car.x.vel * 2;
                        drop1.y.vel = -(_abs(outer.car.x.vel));
                    end
                end

                // drop vs boom
                var& IPhysics boom;
                loop (boom) in outer.booms do
                    if (call Intersects(&drop1, &boom)) then
                        var Vector2D vel = call Boom_Vel(&boom, &drop1);
                        drop1.x.vel = drop1.x.vel + (vel.x*dt);
                        drop1.y.vel = drop1.y.vel + (vel.y*dt);
                    end
                end
            end
        end
    end
end
