#define PI 3.14159265

data Vector2D with
    var int x,y;
end;

data Axis with
    var float pos;
    var int   len;
    var float vel;
    var float acc;
    var float drag;
end

data IPhysics with
    var Axis x;
    var Axis y;
    var SDL_Color clr;
end

code/await Physics (var SDL_Rect rct, var SDL_Color clr)
                    => (var& IPhysics physics)
                        => void
do
    var IPhysics phys_ = val IPhysics(
                                Axis(rct.x, rct.w, 0, 0, 0),
                                Axis(rct.y, rct.h, 0, 0, 0),
                                clr,
                             );
    physics = &phys_;

    par do
        var int dt_ = _;
        every dt_ in SDL_DT do
            var float dt = (dt_ as float)/1000;
            phys_.x.vel = (phys_.x.vel + phys_.x.acc*dt)
                            * (1 - phys_.x.drag*dt);
            phys_.y.vel = (phys_.y.vel + phys_.y.acc*dt)
                            * (1 - phys_.y.drag*dt);
            phys_.x.pos = phys_.x.pos + phys_.x.vel*dt;
            phys_.y.pos = phys_.y.pos + phys_.y.vel*dt;
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(outer.ren,
                                    phys_.clr.r,
                                    phys_.clr.g,
                                    phys_.clr.b,
                                    phys_.clr.a);
            var SDL_Rect r = val SDL_Rect(phys_.x.pos as int,
                                          phys_.y.pos as int,
                                          phys_.x.len as int,
                                          phys_.y.len as int);
            _SDL_RenderFillRect(outer.ren, (&&r as _SDL_Rect&&));
        end
    end
end
