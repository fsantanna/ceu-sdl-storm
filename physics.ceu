data Axis with
    var float pst;
    var int   len;
    var float vel;
    var float acc;
    var float drag;
end

data IPhysics with
    var Axis       x;
    var Axis       y;
    var SDL_Color? clr;
end

code/await Physics (var SDL_Rect rct, var SDL_Color? clr)
                    -> (var IPhysics physics)
                        -> FOREVER
do
    physics = val IPhysics(Axis(rct.x, rct.w, 0, 0, 0),
                           Axis(rct.y, rct.h, 0, 0, 0),
                           clr);

    par do
        var int dt_;
        every dt_ in SDL_DT do
            var float dt = (dt_ as float)/1000;
            physics.x.vel = (physics.x.vel + physics.x.acc*dt)
                                * (1 - physics.x.drag*dt);
            physics.y.vel = (physics.y.vel + physics.y.acc*dt)
                                * (1 - physics.y.drag*dt);
            physics.x.pst = physics.x.pst + physics.x.vel*dt;
            physics.y.pst = physics.y.pst + physics.y.vel*dt;
        end
    with
        every SDL_REDRAW do
            if not physics.clr? then
                continue;
            end
            _SDL_SetRenderDrawColor(&&outer.sdl!.ren,
                                    physics.clr!.r,
                                    physics.clr!.g,
                                    physics.clr!.b,
                                    physics.clr!.a);
            var SDL_Rect r = val SDL_Rect(physics.x.pst as int,
                                          physics.y.pst as int,
                                          physics.x.len as int,
                                          physics.y.len as int);
            _SDL_RenderFillRect(&&outer.sdl!.ren, (&&r as _SDL_Rect&&));
        end
    end
end

code/tight Intersects (var& IPhysics phy1, var& IPhysics phy2) -> bool
do
    escape not (phy1.x.pst+phy1.x.len < phy2.x.pst or
                phy1.y.pst+phy1.y.len < phy2.y.pst or
                phy2.x.pst+phy2.x.len < phy1.x.pst or
                phy2.y.pst+phy2.y.len < phy1.y.pst);
end
